apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mygraph.fullname" . }}
  labels:
    {{- include "mygraph.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  {{- end }}
  selector:
    matchLabels:
      {{- include "mygraph.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mygraph.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mygraph.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: TZ
              value: Asia/Shanghai
            - name: SPRING_APPLICATION_NAME
              value: {{ .Chart.Name }}
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.env }}
            {{- if .Values.initDb }}
            - name: DB_INIT_MODE
              value: ALWAYS
            {{- else }}
            - name: DB_INIT_MODE
              value: NEVER
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            - name: {{ .Values.actuator.portName }}
              containerPort: {{ .Values.actuator.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: {{ .Values.actuator.portName }}
            initialDelaySeconds: {{ .Values.actuator.health.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.actuator.health.liveness.periodSeconds }}
            successThreshold: {{ .Values.actuator.health.liveness.successThreshold }}
            failureThreshold: {{ .Values.actuator.health.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.actuator.health.liveness.timeoutSeconds }}
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: {{ .Values.actuator.portName }}
            initialDelaySeconds: {{ .Values.actuator.health.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.actuator.health.readiness.periodSeconds }}
            successThreshold: {{ .Values.actuator.health.readiness.successThreshold }}
            failureThreshold: {{ .Values.actuator.health.readiness.failureThreshold }}
            timeoutSeconds: {{ .Values.actuator.health.readiness.timeoutSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
